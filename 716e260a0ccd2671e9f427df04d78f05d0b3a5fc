{
  "comments": [
    {
      "key": {
        "uuid": "5ac10518_271098a7",
        "filename": "dovetail/testcase.py",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 6365
      },
      "writtenOn": "2016-12-24T03:39:21Z",
      "side": 1,
      "message": "how to process the exception when the test_type.lower() not equal \u0027shell\u0027.\ni think the \u0027if\u0027 here maybe not necessary.\nBesides, maybe we can integrate the 2 {try: except}s expression in one {try:excpet} expression, becasue there are some duplicate statements",
      "revId": "716e260a0ccd2671e9f427df04d78f05d0b3a5fc",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_677d40e7",
        "filename": "dovetail/testcase.py",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 5469
      },
      "writtenOn": "2016-12-24T03:51:46Z",
      "side": 1,
      "message": "if test_type is not \u0027shell\u0027, it will go to check config file of this non-shell test_type, which is the second try: except.\nWhile if test_type is \u0027shell\u0027, and the cmds in shell tetscase is None, it cannot go to check the config file because there has no config file about shell.",
      "parentUuid": "5ac10518_271098a7",
      "revId": "716e260a0ccd2671e9f427df04d78f05d0b3a5fc",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_47c84422",
        "filename": "dovetail/testcase.py",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 6365
      },
      "writtenOn": "2016-12-24T05:39:34Z",
      "side": 1,
      "message": "1)try:\n2)            cmds_list \u003d self.testcase[\u0027validate\u0027][\u0027cmds\u0027]\n3)            if not cmds_list:\n4)                if test_type.lower() \u003d\u003d \u0027shell\u0027:\n5)                    self.logger.error(\u0027testcase %s has no cmds\u0027, self.name())\n6)                    return False\n7)            else:\n8)                return self.parse_cmd(cmds_list)\n9)except KeyError:\n10)            if test_type.lower() \u003d\u003d \u0027shell\u0027:\n-----\nOkay, In your opinion, at 8)line \nyou just try parse_cmd, no matter it\u0027s test_type.lower() \u003d\u003d \u0027shell\u0027 or not.\nSo,\n(1) if some exceptions happened and the type is \u0027shell\u0027.\n     OK, you will handle it in 10)line, it\u0027s lucky ^_^!\n(2) if some exception happeded and the type is not \u0027shell\u0027\n     you thought don\u0027t care about it, we will go ahead in next \"try excpetion\" expression(we discard the exception here).\n     But the same exception will happened again(2nd happened) in the same function self.parse_cmd(cmds_list) and maybe caused by the same reasons.\n    i think that not necessary!\n    Besides, it is mustn\u0027t discard any exceptions in many cases normally, because the exception may show some abnormal flow that we didn\u0027t take it into consideration.\n-----\nAt the end.\nI think you can express it clearly as below:\n\nif test_type.lower() \u003d\u003d \u0027shell\u0027:\n    try\n       return\n    except:\nelse\n    try\n    except",
      "parentUuid": "5ac10518_677d40e7",
      "revId": "716e260a0ccd2671e9f427df04d78f05d0b3a5fc",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}