---
# report_file: 'dovetail_report.txt'
cli_file_name: 'cmd_config.yml'
report_dest: 'file'
result_file: 'results.json'

# OPENSTACK Credential file
env_file: 'env_config.sh'

# POD info file
pod_file: 'pod.yaml'

# JUMPSERVER private key used in pod_file to login hosts
# If use password to login hosts, there's no need to provide the private key
pri_key: 'id_rsa'

# SDNVPN offline image
sdnvpn_image: 'ubuntu-16.04-server-cloudimg-amd64-disk1.img'

COMPLIANCE_PATH: compliance/
TESTCASE_PATH: testcase/
# testsuite supported, should adjust accordingly
testsuite_supported:
  - compliance_set
  - proposed_tests
  - debug
# testarea supported, should adjust accordingly
testarea_supported:
  - defcore
  - example
  - ha
  - ipv6
  - nfvi
  - sdnvpn
  - vimops

functest_testsuite:
  - refstack_defcore
  - tempest_smoke_serial
  - tempest_full_parallel
  - tempest_custom
  - rally_sanity
  - promise

functest_testcase:
  - bgpvpn
  - connection_check
  - api_check
  - snaps_health_check
  - vping_ssh
  - vping_userdata
  - doctor
  - copper
  - cloudify_ims
  - odl

# used for testcase cmd template in jinja2 format
# we have two variables available now
# parameter path, use this path to walk through python object and get value
# and the python object is "testcase" object by hard-coded
parameters:
  - name: testcase
    path: '("name",)'
  - name: validate_testcase
    path: '("validate", "testcase")'

include_config:
  - functest_config.yml
  - yardstick_config.yml

test_project:
  - 'yardstick'
  - 'functest'

validate_input:
  valid_docker_tag:
    - 'stable'
    - 'latest'
    - 'danube.1.0'
    - 'danube.2.0'
    - 'danube.3.0'
    - 'danube.3.1'
    - 'cvp.0.1.0'
    - 'cvp.0.2.0'
    - 'cvp.0.3.0'
